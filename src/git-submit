#!/bin/bash

#
#  License: BSD compatible
#
#   Author: peter@boros.no
#   Author: bjarneh@ifi.uio.no
#

#  Globals

DRY_RUN=""
SUBMIT_OPTIONS=""
BRANCH=""
REMOTE_BRANCH=""


__git_submit_die() {
    >&2 echo "$1";
    exit 1
}


__git_submit_usage() {

cat <<EOF

 usage: git submit [OPTIONS]

 options:
  -h --help             : print this menu and exit
  -r --reviewer         : specify reviewer(s)
  -c --cc               : specify users to receive carbon copy
  -w --wip              : set the submitted changes to WIP (Work-in-Progress)
  -W --ready            : mark the submitted changes ready (clear WIP status)
  -p --private          : set the submitted changes private
  -P --remove-private   : remove the private flag from the submitted changes
  -t --topic            : set the topic of the submitted change
  -R --remote           : specify remote
  -b --branch           : create a new remote branch
  -n --dryrun           : print what we would do

EOF
}


__git_submit_dryrun() {

cat <<EOF

   branch=${BRANCH}
   merge=${REMOTE_BRANCH}
   remote=${REMOTE}
   submit_options=${SUBMIT_OPTIONS}
   git push ${REMOTE} HEAD:refs/for/${REMOTE_BRANCH}${SUBMIT_OPTIONS}

EOF
    exit 0
}


__git_submit_find_current_branch() {

    BRANCH=$(git symbolic-ref HEAD 2>/dev/null)
    case "${BRANCH}" in
        refs/heads/*)
            BRANCH="${BRANCH:11}"
            ;;
        *)
            __git_submit_die "I can't figure out which branch you are on."
            ;;
    esac
}


__git_submit_missing_remote_no_create() {

>&2 cat <<EOF

 There is no tracking information for the current branch.
 If you wish to set tracking information for this branch you can do so with:

     git branch --set-upstream-to <remote>/<branch>

 Alternatively, you can run git submit with the --branch option and create a
 new remote branch based on the local branch of your change(s).

EOF

    exit 1
}

__git_submit_missing_remote_ancestor() {

>&2 cat <<EOF

 Could not find a remote ancestor for the commit, unable to determine the branch
 point for the new branch.

EOF

    exit 1
}

__git_submit_url_parse_failed() {

>&2 cat <<EOF

 Could not parse the url for the remote ${REMOTE}, unable to create the remote branch.

EOF

    exit 1
}

__git_submit_create_branch_failed() {

>&2 cat <<EOF

 Could not create the branch on the Gerrit server. It is possible that a remote branch
 with that name already exists, the server does not allow ssh commands, or you do not
 have the Create-Reference privilege on the project.

EOF

    exit 1
}

__git_submit_create_remote_branch() {

    local COMMIT='HEAD'
    local ANCESTOR
    local COMMIT_ID
    local URL_REGEX
    while true; do
        ANCESTOR=$(git branch -r --contains "$COMMIT" 2>/dev/null)
        [ $? -ne 0 ] && __git_submit_missing_remote_ancestor
        [ -n "${ANCESTOR}" ] && break
        COMMIT="${COMMIT}^"
    done
    COMMIT_ID=$(git rev-parse ${COMMIT})

    REMOTE_URL=$(git config --get "remote.${REMOTE}.url" 2>/dev/null)
    URL_REGEX='^ssh://([^:]+):([0-9]+)/(.+)$'
    [[ $REMOTE_URL =~ $URL_REGEX ]]
    [ -z "${BASH_REMATCH[1]}" -o -z "${BASH_REMATCH[2]}" -o -z "${BASH_REMATCH[3]}" ] && __git_submit_url_parse_failed

    REMOTE_BRANCH=${BRANCH}
    if [ -n "${DRY_RUN}" ]; then
cat <<EOF

   ssh -p "${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}" gerrit \\
       create-branch "${BASH_REMATCH[3]}" "${BRANCH}" "${COMMIT_ID}"
   git branch --set-upstream-to "${REMOTE}/${BRANCH}"

EOF
    else
        ssh -p "${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}" gerrit \
            create-branch "${BASH_REMATCH[3]}" "${BRANCH}" "${COMMIT_ID}" || __git_submit_create_branch_failed
        git fetch "${REMOTE}" "${BRANCH}"
        git branch --set-upstream-to "${REMOTE}/${BRANCH}"
    fi
}

__git_submit_missing_remote() {

    [ -z "${CREATE_BRANCH}" ] && __git_submit_missing_remote_no_create
    __git_submit_create_remote_branch
}

__git_submit_find_remote() {

    REMOTE=$(git config --get "branch.${BRANCH}.remote")
    if [ -z "${REMOTE}" ]; then
        REMOTE="origin"
    fi
}


# The first option is separated from the reference
# by a '%', any further options are appended with
# a comma.
__git_submit_append_option() {

    local OPTION=$1
    if [ -z "${SUBMIT_OPTIONS}" ]; then
        SUBMIT_OPTIONS="%${OPTION}"
    else
        SUBMIT_OPTIONS="${SUBMIT_OPTIONS},${OPTION}"
    fi
}

# Either: __git_submit_append_options option
# or:     __git_submit_append_options option values
# where values can be a single value or a comma separated list
# of multiple values
#
# String split in Bash
# http://stackoverflow.com/a/918931/447838
#
# NOTE:
# We assume usernames (for reviewers, cc), topics, or any
# other option values have no whitespace, since that will
# break stuff later anyway, although this function does
# support whitespace between delimiters...
__git_submit_append_options() {

    local OPTION=$1
    local VALUE
    if [ -z "$2" ]; then
        __git_submit_append_option "${OPTION}"
    else
        while IFS=',' read -ra VALUE; do
            for i in "${VALUE[@]}"; do
                __git_submit_append_option "${OPTION}=${i}"
            done
        done <<< "$2"
    fi

}


# Doesn't use getopts since it only supports single char flags
__git_submit_parse_argv() {

    while [[ $# > 0 ]]; do

        key="$1"

        case "${key}" in
            -h|-help|--help|help)
                __git_submit_usage && exit 1
                ;;
            -r|-reviewer|--reviewer)
                if [ -z "$2" ]; then
                    __git_submit_die "Missing argument for: ${key}";
                fi
                __git_submit_append_options "r" "$2"
                shift # past argument
                ;;
            -r=*)
                __git_submit_append_options "r" "${1:3}"
                ;;
            -reviewer=*)
                __git_submit_append_options "r" "${1:10}"
                ;;
            --reviewer=*)
                __git_submit_append_options "r" "${1:11}"
                ;;
            -c|-cc|--cc)
                if [ -z "$2" ]; then
                    __git_submit_die "Missing argument for: ${key}";
                fi
                __git_submit_append_options "cc" "$2"
                shift # past argument
                ;;
            -c=*)
                __git_submit_append_options "cc" "${1:3}"
                ;;
            -cc=*)
                __git_submit_append_options "cc" "${1:4}"
                ;;
            --cc=*)
                __git_submit_append_options "cc" "${1:5}"
                ;;
            -t|-topic|--topic)
                if [ -z "$2" ]; then
                    __git_submit_die "Missing argument for: ${key}";
                fi
                __git_submit_append_options "topic" "$2"
                shift # past argument
                ;;
            -t=*)
                __git_submit_append_options "topic" "${1:3}"
                ;;
            -topic=*)
                __git_submit_append_options "topic" "${1:7}"
                ;;
            --topic=*)
                __git_submit_append_options "topic" "${1:5}"
                ;;
            -w|-wip|--wip)
                __git_submit_append_options "wip"
                ;;
            -W|-ready|--ready)
                __git_submit_append_options "ready"
                ;;
            -p|-private|--private)
                __git_submit_append_options "private"
                ;;
            -P|-remove-private|--remove-private)
                __git_submit_append_options "remove-private"
                ;;
            -R|-remote|--remote)
                if [ -z "$2" ]; then
                    __git_submit_die "Missing argument for: ${key}";
                fi
                REMOTE="$2"
                shift # past argument
                ;;
            -R=*)
                REMOTE="${1:3}"
                ;;
            -remote=*)
                REMOTE="${1:8}"
                ;;
            --remote=*)
                REMOTE="${1:9}"
                ;;
            -b|-branch|--branch)
                CREATE_BRANCH="1"
                ;;
            -n|--dry-run|--dryrun|-dryrun|-dry-run)
                DRY_RUN="1"
                ;;
            *)
                __git_submit_die "Unknown option: ${key}"
                ;;
        esac
        shift # past argument or value
    done

}


# main
{
    __git_submit_parse_argv "${@}"
    __git_submit_find_current_branch
    [ -z "${REMOTE}"  ] && __git_submit_find_remote
    REMOTE_BRANCH=$(git config --get "branch.${BRANCH}.merge" 2>/dev/null)
    [ -z "${REMOTE_BRANCH}" ] && __git_submit_missing_remote
    [ -z "${DRY_RUN}" ] || __git_submit_dryrun
    #echo "git push ${REMOTE} HEAD:refs/for/${REMOTE_BRANCH}${SUBMIT_OPTIONS}"
    git push "${REMOTE}" HEAD:refs/for/"${REMOTE_BRANCH}${SUBMIT_OPTIONS}"
}
